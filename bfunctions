#!/usr/bin/env bash

__promp_command ()
{
  local _ret=$?;
  PS1="";
  # line 1
  PS1+="\n[$(def_user_wcolor) at $(def_host_wcolor)]:[$(def_local_wcolor)]$(def_branch_wcolor)";
  # ine 2
  PS1+="\n  \\-- $(def_date_wcolor) $(pretty_battery)";
  # line 3
  PS1+="\[${CYAN}\]";
  PS1+="\[\n\]$\[ \]_";
  if [ ${_ret} != 0 ]; then
    PS1+="\[${red}\]";
  else
    PS1+="\[${CYAN}\]";
  fi
  PS1+="> ";
  PS1+="\[${NC}\]";
}

def_user_wcolor ()
{
  USER=${USER:=$(whoami)};
  [ "${USER}" = "lucas.bretana" ] && USER="lucasbretana";
  local _usercolor=${USERNAMECOLOR["${USER}"]} 2> /dev/null || local _usercolor=${_usercolor:=$USRDEFCLR};
  echo -e "${_usercolor}${USER}${NC}";
}

# @TODO fix, the associative arrays breaks when trying to index it with
# a string that start with `0`, since bash interprets it as a octal number
# so if there is any characther not in [0..8) it will give an error
# about too great value..
# .. no workaound found will now
def_host_wcolor ()
{
  local _hn=$(hostname -s);
  local _hostcolor=${HOSTNAMECOLOR[${_hn}]}; # @fix: it breaks when hostname start with a number
  _hostcolor=${_hostcolor:=$HSTDEFCLR};
  echo -e "${_hostcolor}${_hn}${NC}";
}

def_local_wcolor ()
{
  local _pwd="";
  git status &> /dev/null;
  if [ $? == 0 ]; then
    # NEW IMPLEMENTATION
    #local _fullpwd=$(git rev-parse --show-toplevel);
    #local _basepwd=$(basename ${_fullpwd})
    #local _outpwd=$(pwd -L);
    #local _subdir=$(echo ${_local##*${_repo}});
    #local _reppwd=$(echo ${_fullpwd##*${_outpwd}});

    local _basepwd=$(basename $(git rev-parse --show-toplevel));
    local _outpwd=$(pwd -L);
    local _subpwd=$(echo ${_outpwd##*${_basepwd}});
    local _fullpwd=${_basepwd}${_subpwd};

    _pwd+=${GITDEFCLR};
    _pwd+=${_fullpwd};
    [ -n "${_extra}" ] && _pwd=" ${_extra}";
    _pwd+=${NC};
  else
    _pwd+=${DIRDEFCLR};
    _pwd+=$(pwd | sed "s|$HOME|~|");
    _pwd+=${NC};
  fi

  echo -e "${_pwd}";
}

def_date_wcolor ()
{
  local _date="";
  _date+=${DATDEFCLR};
  _date+=$(date "+%m.%d");
  _date+=${NC};

  local _hour="";
  _hour+=${HOUDEFCLR};
  _hour+=$(date "+%H:%M:%S");
  _hour+=${NC};
  echo -e "${_date} ${_hour}";
}

def_branch_wcolor ()
{
  git status &> /dev/null || { echo ""; return; };

  local _branch="";
  _branch+=${BRADEFCLR};
  _branch+="(";
  local _bname=$(git branch --list 2> /dev/null | grep "*" | cut -d " " -f 2);
  if [ $? != 0 ]; then
    _bname="nobranch";
  fi
  _branch+=${_bname};
  local _extra=$(getgitsymbol "${_bname}" 2> /dev/null);
  [ -n "${_extra}" ] && _branch+=" "${_extra};
  _branch+=")";
  _branch+=${NC};

  echo -e "${_branch}";
}

# man: prints one (or more) symbol(s) that represent the stage of a git repositorie in relation to server
# parameter: 1 - the branch name (mandotory)
getgitsymbol ()
{
  [ ${#1} = 0 ] && echoerr "getgitsymbol: missing branch" && return 1;
  local _unstaged=$(unstaged | xargs 2> /dev/null);
  local _ahead=$(ahead $1 | xargs 2> /dev/null);
  local _behind=$(behind $1 | xargs) 2> /dev/null;
  echo -n "${_unstaged}";
  ( [ -n "${_unstaged}" ] && [ -n "${_ahead}" ] ) && echo -n " " ;
  echo -n "${_ahead}";
  ( ( [ -n "${_unstaged}" ] || [ -n "${_ahead}" ] ) && [ -n "${_behind}" ] ) && echo -n " " ;
  echo -n "${_behind}";
}

# man: printfs the unstaged symbol if the current directorie is a git repositorie and it is unstaged
unstaged_symbol='*';
unstaged ()
{
  # If the git status has *any* changes (e.g. dirty), echo our character
  INFO=$(git status --porcelain 2> /dev/null);
  if [ ${#INFO} != 0 ]; then
    echo "$unstaged_symbol";
  fi
}

# man: prints the ahead_symbol if have commits not send to server
# parameters: $1 - must be the branch (mandatory)
ahead_symbol="↑";
ahead ()
{
  [ ${#@} -eq 0 ] && echoerr "ahead: missing branch\n See the manual" && return 1;

  case "$@" in
    *"-f"*)
      [ ${#@} -le 1 ] && echoerr "ahead: missing branch\n See the manual" && return 2;
      git fetch origin master;
    ;;
    *"--fetch"*)
      [ ${#@} -le 1 ] && echoerr "ahead: missing branch\n See the manual" && return 2;
      git fetch origin master;
    ;;
  esac

  local _branch=${1:-master}; #NOTE:if there is no branch it isn't suppose to get to here

  local _info=$(git rev-list --left-right --count origin/$_branch...HEAD 2> /dev/null | cut -f 2);

  if [[ -n "$_info" && $_info -gt 0 ]]; then
    echo "$ahead_symbol""$_info";
  fi
}

# man: prints the beghind symbol if inside a git repositorie and is behind
# paramater: 1 - the branch (mandatory)
behind_symbol="↓";
behind ()
{
  [ ${#1} = 0 ] && echoerr "behind: missing branch" && return 1;
  local _info=$(git rev-list --left-right --count origin/$1...HEAD | cut -f 1);
  if [[ -n "$_info" && $_info -gt 0 ]]; then
    echo "$behind_symbol""$_info";
  fi
}

# mman: improves the man
# searches for a more specific manual on $MYMANUAL first
# for ambigous manual pages preced the <command> with an = (equal sign)
mman ()
{
  _target=$1;
  if [[ $1 == "="* ]];
  then
    _target=$(echo "$1" | tr -d "=");
  fi
  /usr/bin/man "$MYMANUAL"/"$_target" 2> /dev/null || ] /usr/bin/less -x 2 "$MYHELP"/man_"$_target".txt 2> /dev/null || /usr/bin/man "$_target" 2> /dev/null || cowsay "No trace of manual page" 2> /dev/null || echoerr "No trace of manual page";
}

# man: change the cat to refuse to work without treats
# TODO: tac
tac ()
{
    if [ "$1" != "+treats" ]; then
        echoerr "meow" && return 1;
    else
        for i in "$@";
        do
            if [ "$i" != "+treats" ]; then
                /usr/bin/tac "$i";
            fi;
        done;
    fi
}

# section: usefull functions
#
# man: prints an error message in red on the err stream
# parameters: takes the string to be displayed (default is "error") (optinal)
echoerr ()
{
  echo -e "$RED${@:-error}$NC" 1>&2;
}

# man: prints the colors know by shell
# paramater: 1 - a word to print with the colors (optional)
colors ()
{
  local string=${1:-"Hello World"};
  echo -e "grey: $grey""$string""$NC";
  echo -e "GREY: $GREY""$string""$NC";
  echo -e "red: $red""$string""$NC";
  echo -e "RED: $RED""$string""$NC";
  echo -e "green: $green""$string""$NC";
  echo -e "GREEN: $GREEN""$string""$NC";
  echo -e "yellow: $yellow""$string""$NC";
  echo -e "YELLOW: $YELLOW""$string""$NC";
  echo -e "purple: $purple""$string""$NC";
  echo -e "PURPLE: $PURPLE""$string""$NC";
  echo -e "white: $white""$string""$NC";
  echo -e "WHITE: $WHITE""$string""$NC";
  echo -e "blue: $blue""$string""$NC";
  echo -e "BLUE: $BLUE""$string""$NC";
  echo -e "cyan: $cyan""$string""$NC";
  echo -e "CYAN: $CYAN""$string""$NC";
}

# man: uses the collins dictionary to define a word, and shows only the part that is relevant for the context
# paramater: 1 - a word to be defined (mandatory)
define ()
{
  [ ${#1} = 0 ] && echoerr "define: no word to be defined" && return 1;
  curl -s "https://www.collinsdictionary.com/dictionary/english/$*" | sed -n '/class="def"/p' | awk '{gsub(/.*<span class="def">|<\/span>.*/,"");print}' | sed "s/<[^>]\+>//g";
}

# man: used to convert some manual to a PDF file
# parameter: 1 - the manual to convert (mandatory)
man2pdf ()
{
  [ ${#1} = 0 ] && echoerr "man2pdf: no man to convert" && return 1;
  man -t $1 | ps2pdf - > $1.pdf
}

# man: changes all leter in string to it's correspondent in upper casae
# paramater: 1 - the word to be converted (mandatory)
toup ()
{
  [ ${#1} = 0 ] && echoerr "toup: no word to convert" && return 1;
  echo $1 | tr '[:lower:]' '[:upper:]'
}

# man: changes all leter in string to it's correspondent in lower case
# paramater: 1 - the word to be converted (mandatory)
tolow ()
{
  [ ${#1} = 0 ] && echoerr "tolow: no word to convert" && return 1;
  echo $1 | tr '[:upper:]' '[:lower:]'
}

# man: flip a coin, faster than Google's
flipacoin ()
{
  [ $[ $RANDOM % 2] == 0 ] && echo ${1:-"Heads"} || echo ${2:-"Tails"};
}

# man: gets the weahter from the wttr sie and shows in terminal
# man: it can be specified witch city you want, the default is Pelotas
# paramater: 1 - the city (default is Pelotas) (optinal)
getweather ()
{
  curl "http://wttr.in/${1:-Pelotas}";
}

# man: check if ONE repositorie needs a commit and/or a pull
# TODO: cgit
cgit ()
{
  if [ -n "$1" ]; then
    cd $1 2> /dev/null || (echoerr "Directory \"$1\" not found!" && return);
    REPO=$(pwd -P);
    BRANCH="master"
    if [ -n "$2" ]; then
      BRANCH=$2;
      git checkout $BRANCH 1> /dev/null 2> /dev/null || (echoerr "Branch \"$BRANCH\" not found" && return);
    fi
    # STATUS=$(git status 2> /dev/null | tr "\n" "+" | grep -v "nothing to commit" | tr "+" "\n");
    STATUS=$(unstaged || ahead $BRANCH);
    if [ -n "$STATUS" ]; then
      echo -e "\n############################################";
      echo "#### On repo: $(basename $(git rev-parse --show-toplevel)) [$REPO :: $BRANCH]";
      echo "It's missing a commit and/or push!";
    fi
    # PULL=$(git pull --dry-run origin $BRANCH  2>&1 1>  /dev/null | grep -iv github | grep -iv branch);
    PULL=$(behind $BRANCH);
    if [ -n "$PULL" ]; then
      echo -e "\n############################################";
      echo "#### On repo: $(basename $(git rev-parse --show-toplevel)) [$REPO :: $BRANCH]";
      echo "It's missing a pull!";
    fi;
  fi;
}

# man: check all gits repositories for missing commit/push and pull/fetch
# NOTE: uses updategitvar
# TODO: checkgit
checkgit ()
{
  if [ -z "$GIT" ]; then
    updategitvar;
  fi;
  if [ -z "$GIT" ]; then
    echoerr "The 'GIT' system variable is not set" && return;
  fi;
  export GIT;

  if [ $# -ge 2 ]; then
    cgit "$@";
    return;
  elif [ -n "$1" ]; then
    cgit $1;
    return;
  fi
  BACK=$(whereami);
  for REPO in $(echo $GIT | tr ":" "\n");
  do
    cd $REPO;
    for BRANCH in $(git branch --list | tr "*" " " | tr "\n" " "); {
      [ "$DEBUG" = "true" ] && echo "Calling cgit with \"$REPO\" and \"$BRANCH\"";
      cgit $REPO $BRANCH;
    }
  done;
  cd $BACK;
}

# man: updates the GIT var, than contains all repositories,
# man: run after added a new one or remove an old one
# NOTE: it is used by checkgit function
# NOTE: updategitvar
updategitvar ()
{
  unset GIT ;
  for i in $(find $HOME -name ".git" 2> /dev/null | sed "s/\/.git//g"); {
    if [ -n "$GIT" ]; then
      GIT=$GIT:$i ;
    else
      GIT=$i ;
    fi
  }
  export GIT;
}

# man: top 10 CPU and memory eating process
memcpu ()
{
  echo -e "*** Top $RED ten $NC $PURPLE CPU $NC eating process ***"; ps aux | sort -nr -k 3 | head -10;
  echo;echo;
  echo -e "*** Top $RED ten $NC $PURPLE MEMORY $NC eating process ***"; ps aux | sort -nr -k 4 | head -10;
}

# man: automatically decompress some know types of files
# paramater: 1 - the file to be decompressed (mandatory)
# TODO: decompress
decompress ()
{
  filename=$(basename "$1");

  case "$filename" in
    *.bz2)     bunzip2 "$1"     || echoerr "bunzip2: error";;
    *.tar.bz2) tar -vxjpf "$1"  || echoerr "tar: error";;
    *.tar.gz)  tar -vzxf "$1"   || echoerr "tar: error";;
    *.tgz)     tar -vzxf "$1"   || echoerr "tar: error";;
    *.gz)      tar -vzxf "$1"   || echoerr "tar: error";;
    *.tar)     tar xf "$1"      || echoerr "tar: error";;
    *.tar.xz)  tar -xf "$1"     || echoerr "tar: error";;
    *.zip)     unzip "$1"       || echoerr "unzip: error";;
    *.7z)      7z x -y "$1"     || echoerr "7z: error";;
    *.rar)     unrar x "$1"     || echoerr "unrar: error";;
    *)         echoerr "decompress: error, unsuported";;
  esac
}

# man: morty quotes
morty_says ()
{
  /bin/echo -e "$RED""$MORTY_QUOTE""$NC";
}

# man: a function to connect to lups server
# paramater 1: lups machine
connectlups ()
{
  _host="${1:-$LUPS_HOST}";
  /usr/bin/ssh -l $LUPS_NAME $LUPS_SERVER -t "ssh $_host";
}

# Author: Giles Orr
# Got it from: @Jonathas-Coceicao
# edited
# URL: http://gilesorr.com/bashprompt/howto/c350.html
# License: GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation;
#          http://gilesorr.com/bashprompt/howto/a1004.html
pcolors ()
{
  local T=${1:-"gYw"};

  echo -e "\n                 40m     41m     42m     43m     44m     45m     46m     47m";

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
    '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
      '  36m' '1;36m' '  37m' '1;37m';

  do FG=${FGs// /}
  echo -en " $FGs \033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
  do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
  done
    echo;
  done
    echo

  echo -e "$grey""grey""$NC""\t$GREY""GREY""$NC";
  echo -e "$red""red""$NC""\t$RED""RED""$NC";
  echo -e "$green""green""$NC""\t$GREEN""GREEN""$NC";
  echo -e "$yellow""yellow""$NC""\t$YELLOW""YELLOW""$NC";
  echo -e "$purple""purple""$NC""\t$PURPLE""PURPLE""$NC";
  echo -e "$white""white""$NC""\t$WHITE""WHITE""$NC";
  echo -e "$blue""blue""$NC""\t$BLUE""BLUE""$NC";
  echo -e "$cyan""cyan""$NC""\t$CYAN""CYAN""$NC";
}

# man: a function to display battery status
pretty_battery ()
{
  acpi &> /dev/null;
  [ $? != 0 ] && return;
  local _hasbat=$(acpi -b 2>&1 | grep -i "no support");
  [ -n "$_hasbat" ] && return;

  local _batinfo=$(acpi -b);
  local _pc=$(echo "${_batinfo}" | cut -d "," -f 2 | sed "s/ //g" | tr -d "%");
  local _ch=$(echo "${_batinfo}" | grep -i 'discharging');

  local _batdisplay="";
  if [ $_pc -lt 20 ]; then
    _batdisplay+="${RED}";
  else
    _batdisplay+="${green}";
  fi

  _batdisplay+="bat:";
  _batdisplay+="${_pc}%${NC}";
  if [ -n "${_ch}" ]; then
    _batdisplay+="${red}-${NC}";
  else
    _batdisplay+="${green}+${NC}";
  fi;

  echo -e "${_batdisplay}"
}
